datatype bit = one | zero;
datatype card = Cardinal of bit list;

fun addCard (Cardinal([zero])) (Cardinal([zero])) = Cardinal([zero])
  | addCard (Cardinal(xs)) (Cardinal([zero])) = Cardinal(xs)
  | addCard (Cardinal([zero]))     (Cardinal(xs)) = Cardinal(xs)
  | addCard (Cardinal(xs)) (Cardinal(ys)) = let fun help [] [] cin ys = Cardinal(rev(cin::ys))
											  | help [] xs cin ys = help [cin] xs zero ys
											  | help xs [] cin ys = help [cin] xs zero ys
											  | help (zero::xs) (zero::zs) zero ys = help xs zs zero (zero::ys)
											  | help (zero::xs) (one::zs) zero ys = help xs zs zero (one::ys)
											  | help (one::xs) (zero::zs) zero ys = help xs zs zero (one::ys)
											  | help (one::xs) (one::zs) zero ys = help xs zs one (zero::ys)
											  | help (zero::xs) (zero::zs) one ys = help xs zs zero (one::ys)
											  | help (zero::xs) (one::zs) one ys = help xs zs one (zero::ys)
											  | help (one::xs) (zero::zs) one ys = help xs zs one (zero::ys)
											  | help (one::xs) (one::zs) one ys = help xs zs one (one::ys)
										in help xs ys zero [] end;
											  
addCard (Cardinal[one, one]) (Cardinal[zero,one, one]);
addCard (Cardinal[one, one,zero,one]) (Cardinal[zero,one, zero,one, one,one]);
addCard (Cardinal[one, one,one,one,one,one]) (Cardinal[one,one, one,one]);
addCard (Cardinal[one,one,one,one]) (Cardinal[one,one,one,one]);
